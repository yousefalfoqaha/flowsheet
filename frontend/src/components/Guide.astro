---
import {$studyPlan, fetchStudyPlan} from "../stores/studyPlan";
import Level from "./Level.astro";

await fetchStudyPlan(1);
const studyPlan = $studyPlan.get();
if (!studyPlan) return;

const {
    program,
    courses,
    track,
    year,
    sections
} = studyPlan;

const requirementCourses = sections
    .filter(sec => sec.type === "Requirement")
    .flatMap(sec => sec.courses)
    .map(id => courses[id])
    .sort((a, b) => a.sequences.level - b.sequences.level);

const levelHeaders = {
    FOUNDATIONAL: "Foundational",
    INTERMEDIATE: "Intermediate",
    ADVANCED: "Advanced"
};

const coursesPerLevelCount = Math.ceil(requirementCourses.length / 3);
---

<div class="flex flex-col gap-6 p-6 border h-full">
    <header class="flex flex-col gap-1">
        <h1 class="text-2xl font-bold">{program.degree}s in {program.name} ({program.code})</h1>
        <h2 class="opacity-60">
            {year}/{year + 1}
            {track ? ` - ${track}` : ''}
        </h2>
    </header>
    <div class="relative flex flex-row gap-2 overflow-auto">
        {Object.entries(levelHeaders).map(([key, header], index) => {
            const start = index * coursesPerLevelCount;
            const end = start + coursesPerLevelCount;

            const levelCourses = requirementCourses
                .slice(start, end)
                .sort((a, b) =>
                    b.sequences.postrequisiteSequence.length - a.sequences.postrequisiteSequence.length
                );

            return <Level header={header} courses={levelCourses} />
        })}
    </div>
</div>
