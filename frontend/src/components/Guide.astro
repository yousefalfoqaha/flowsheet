---
import {$studyPlan, fetchStudyPlan} from "../stores/studyPlan";
import {sortByCourseCode} from "../utils/sortByCourseCode";
import Level from "./Level.astro";
import SectionCombobox from "./SectionCombobox.astro";

await fetchStudyPlan(1);

const studyPlan = $studyPlan.get();
if (!studyPlan) return;
const {
    program,
    courses,
    track,
    year,
    sections
} = studyPlan;

const requiredCourses = sections
    .filter(sec => sec.type === "Requirement")
    .flatMap(sec => sec.courses)
    .map(id => courses[id])
    .sort((a, b) => a.sequences.level - b.sequences.level);

const minLevel = requiredCourses[0]?.sequences.level;
const maxLevel = requiredCourses[requiredCourses.length - 1]?.sequences.level;
---

<div class="flex flex-col gap-6 p-6 h-full w-full">
    <header class="flex flex-col gap-1">
        <h1 class="text-2xl font-bold">{program.degree}s in {program.name} ({program.code})</h1>
        <h2 class="opacity-60">
            {year}/{year + 1}
            {track ? ` - ${track}` : ''}
        </h2>
    </header>
    <SectionCombobox sections={sections} />
    <div class="flex flex-col gap-2 overflow-auto">
        <div class="flex flex-row p-2 bg-gray-500 text-white font-semibold rounded text-center">
            <p class="w-1/3">Foundational</p>
            <p class="w-1/3">Intermediate</p>
            <p class="w-1/3">Advanced</p>
        </div>

        <div class="relative flex flex-row gap-2 overflow-auto">
            {Array.from({length: maxLevel - minLevel + 1}, (_, i) => minLevel + i).map(level => {
                const levelCourses = requiredCourses
                    .filter(c => c.sequences.level === level)
                    .sort((a, b) => sortByCourseCode(a, b, program.code));

                return <Level courses={levelCourses}/>
            })}
        </div>
    </div>
</div>