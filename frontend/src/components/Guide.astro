---
import Level from "../components/Level.astro";
import {$studyPlan, fetchStudyPlan} from "../stores/studyPlan";
import {type Course} from "../types";

await fetchStudyPlan(1);

const studyPlan = $studyPlan.get();
if (!studyPlan) return;
const {
    program,
    courses,
    track,
    year,
    sections
} = studyPlan;

let currentLevel = 1;
let levels: Map<number, Course[]> = new Map();
let requiredCourses= sections
    .filter(sec => sec.type === "Requirement")
    .flatMap(sec => sec.courses)
    .map(id => courses[id]);

while (true) {
    const levelCourses= requiredCourses.filter(course =>
        course && course.sequences.level === currentLevel
    );

    if (levelCourses.length === 0) break;

    levels.set(currentLevel, levelCourses);

    currentLevel++;
}

const sortByCourseCode = (a, b) => {
    const parseCode = (code) => {
        const match = code.match(/^([A-Z]+)(\d+)/);
        if (!match) return { dept: '', num: 0 };

        const dept = match[1];
        const fullNum = match[2];
        const baseNum = parseInt(fullNum.replace(/0+$/, ''));
        const secondaryNum = parseInt(fullNum);

        const isGermanCourse = dept === 'GERL';
        const isProgramCourse = dept === program.code;

        return {
            dept,
            baseNum,
            secondaryNum,
            isGermanCourse,
            isProgramCourse
        };
    };

    const codeA = parseCode(a.code);
    const codeB = parseCode(b.code);

    if (codeA.isGermanCourse !== codeB.isGermanCourse) {
        return codeB.isGermanCourse ? 1 : -1;
    }

    if (codeA.isProgramCourse !== codeB.isProgramCourse) {
        return codeB.isProgramCourse ? 1 : -1;
    }

    if (codeA.dept !== codeB.dept) {
        return codeA.dept.localeCompare(codeB.dept);
    }

    if (codeA.baseNum !== codeB.baseNum) {
        return codeA.baseNum - codeB.baseNum;
    }

    return codeA.secondaryNum - codeB.secondaryNum;
};
---

<div class="flex flex-col gap-6 p-6 border h-full">
    <header class="flex flex-col gap-1">
        <h1 class="text-2xl font-bold">{program.degree}s in {program.name} ({program.code})</h1>
        <h2 class="opacity-60">
            {year}/{year + 1}
            {track ? ` - ${track}` : ''}
        </h2>
    </header>

    <div class="relative flex flex-row gap-2 overflow-auto">
        {Array.from(levels.entries()).map(([level, levelCourses]) => {
            levelCourses.sort(sortByCourseCode);

            return (<Level
                    level={level}
                    courses={levelCourses}
                    programCode={program.code}
            />)
        })}
    </div>
</div>