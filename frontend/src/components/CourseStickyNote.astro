---
const {id, code, name, creditHours, prerequisites, sequences} = Astro.props;
---

<sticky-note
        id={id}
        data-prerequisites={JSON.stringify(prerequisites)}
        data-sequences={JSON.stringify(sequences)}
        class=""
>
    <div class="relative h-36 bg-gray-200 p-4 py-3 hover:bg-blue-100 transition-colors group">
        <h3 class="font-semibold text-lg mb-1">{code}</h3>
        <p class="text-sm line-clamp-3">{name}</p>
        <p class="absolute bottom-3 right-3 text-sm opacity-60 font-semibold">{creditHours} Cr.</p>
        <i
                data-lucide="info"
                class="opacity-0 size-5 absolute top-3 right-3 hover:text-gray-600 group-hover:opacity-100 cursor-pointer transition-opacity"
        />
        <div class="indicator absolute top-2 right-2" />
    </div>
</sticky-note>

<script>
    import type {CoursePrerequisite, CourseSequences} from "../types";
    import {createElement, createIcons, Info, ChevronsRight, ChevronsLeft, ChevronLeft} from "lucide";

    createIcons({icons: {Info, ChevronsRight, ChevronsLeft, ChevronLeft}});

    class StickyNote extends HTMLElement {
        private prerequisites: CoursePrerequisite[];
        private sequences: CourseSequences;

        constructor() {
            super();

            this.prerequisites = JSON.parse(this.dataset.prerequisites || '[]');
            this.sequences = JSON.parse(this.dataset.sequences || '{}');

            this.addEventListener('mouseenter', this.highlightRelatedCourses);
            this.addEventListener('mouseleave', this.resetHighlights);
        }

        private highlightRelatedCourses = () => {
            const notesToHighlight = [
                ...this.prerequisites.map(p => ({
                    id: p.prerequisite,
                    classes: ['bg-orange-300'],
                    icon: ChevronLeft
                })),
                ...this.sequences.prerequisiteSequence
                    .map(id => ({
                        id,
                        classes: ['bg-yellow-200'],
                        icon: ChevronsLeft
                    })),
                ...this.sequences.postrequisiteSequence.map(id => ({
                    id,
                    classes: ['bg-sky-800', 'text-white'],
                    icon: ChevronsRight
                }))
            ];

            notesToHighlight.forEach(({id, classes, icon}) => {
                const stickyNote = document.querySelector(`sticky-note[id="${id}"] > div`);
                const indicator = stickyNote?.querySelector('.indicator');
                if (!stickyNote || !indicator) return;

                stickyNote.classList.add(...classes);

                const iconElement = createElement(icon);
                iconElement.classList.add(
                    'opacity-0',
                    'transition-opacity',
                    'duration-300'
                );
                indicator.appendChild(iconElement);

                requestAnimationFrame(() => {
                    iconElement.classList.remove('opacity-0');
                });
            });
        }

        private resetHighlights = () => {
            const stickyNotes = document.querySelectorAll('sticky-note > div');
            stickyNotes.forEach(note => {
                note.classList.remove(
                    'bg-orange-300',
                    'bg-yellow-200',
                    'bg-sky-800',
                    'text-white'
                );

                const indicator = note.querySelector('.indicator');
                if (indicator) indicator.innerHTML = '';
            });
        }
    }

    customElements.define('sticky-note', StickyNote);
</script>