---
const {id, code, name, creditHours, type, prerequisites, corequisites, sequences} = Astro.props;
---

<sticky-note
        id={id}
        data-id={JSON.stringify(id)}
        data-prerequisites={JSON.stringify(prerequisites)}
        data-corequisites={JSON.stringify(corequisites)}
        data-sequences={JSON.stringify(sequences)}
>
    <div class="cursor-pointer relative h-32 bg-gray-200 p-3 py-2 hover:bg-blue-100 hover:text-black transition-colors group rounded-md">
        <h3 class="font-semibold">{code}</h3>
        <p class="text-sm line-clamp-3">{name}</p>
        <p class="absolute bottom-2 left-2 text-sm font-semibold group-hover:opacity-50 opacity-0 transition-opacity">
            {creditHours} Cr.
        </p>
        <p class="absolute bottom-2 right-2 text-sm font-semibold group-hover:opacity-50 opacity-0 transition-opacity">
            {type}
        </p>
        <i
                data-lucide="info"
                class="opacity-0 size-5 absolute top-2 right-2 hover:text-gray-500 group-hover:opacity-100 cursor-pointer transition-opacity"
        />
        <div class="indicator absolute top-1 right-1 group-hover:opacity-0 transition-opacity" />
    </div>
</sticky-note>

<script>
    import type {CoursePrerequisite, CourseSequences} from "../types";
    import {
        createElement,
        createIcons,
        Info,
        ArrowBigRightDash,
        ArrowBigLeftDash,
        ArrowBigLeft,
        ArrowBigUp
    } from "lucide";

    createIcons({icons: {Info, ArrowBigRightDash, ArrowBigLeftDash, ArrowBigLeft, ArrowBigUp}});
    let selectedCourse: number | null = null;

    class StickyNote extends HTMLElement {
        private id: number;
        private prerequisites: CoursePrerequisite[];
        private corequisites: number[];
        private sequences: CourseSequences;

        constructor() {
            super();
            this.id = JSON.parse(this.dataset.id ?? '');
            this.prerequisites = JSON.parse(this.dataset.prerequisites || '[]');
            this.corequisites = JSON.parse(this.dataset.corequisites || '[]');
            this.sequences = JSON.parse(this.dataset.sequences || '{}');

            this.addEventListener('click', () => {
                this.resetHighlights();

                if (selectedCourse === this.id) {
                    selectedCourse = null;
                    return;
                }

                selectedCourse = this.id;
                this.highlightRelatedCourses();
            });
        }

        private highlightRelatedCourses = () => {
            this.querySelector('div')?.classList.add('bg-blue-100');

            const notesToHighlight = [
                ...this.prerequisites.map(pr => ({
                    id: pr.prerequisite,
                    classes: ['bg-orange-300'],
                    icon: ArrowBigLeft
                })),
                ...this.corequisites.map(id => ({
                    id: id,
                    classes: ['bg-gray-400', 'text-white'],
                    icon: ArrowBigUp
                })),
                ...this.sequences.prerequisiteSequence
                    .map(id => ({
                        id,
                        classes: ['bg-yellow-200'],
                        icon: ArrowBigLeftDash
                    })),
                ...this.sequences.postrequisiteSequence.map(id => ({
                    id,
                    classes: ['bg-sky-800', 'text-white'],
                    icon: ArrowBigRightDash
                }))
            ];

            notesToHighlight.forEach(({id, classes, icon}) => {
                const stickyNote = document.querySelector(`sticky-note[id="${id}"] > div`);
                const indicator = stickyNote?.querySelector('.indicator');
                if (!stickyNote || !indicator) return;

                stickyNote.classList.add(...classes);

                const iconElement = createElement(icon);
                iconElement.classList.add(
                    'opacity-0',
                    'transition-opacity',
                    'duration-300'
                );
                indicator.appendChild(iconElement);

                requestAnimationFrame(() => {
                    iconElement.classList.remove('opacity-0');
                });
            });
        }

        private resetHighlights = () => {
            const stickyNotes = document.querySelectorAll('sticky-note > div');
            stickyNotes.forEach(note => {
                note.classList.remove(
                    'bg-blue-100',
                    'bg-orange-300',
                    'bg-yellow-200',
                    'bg-sky-800',
                    'bg-gray-400',
                    'text-white'
                );

                const indicator = note.querySelector('.indicator');
                if (indicator) indicator.innerHTML = '';
            });
        }
    }

    customElements.define('sticky-note', StickyNote);
</script>